{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import\"../styles/Chatgpt.css\";import imgsend from\"../images/sent.png\";import useChat from\"../hooks/useChat\";import DOMPurify from\"dompurify\";import{escapeHtml}from\"../utils/securityUtils\";import ChatSidebar from\"./ChatSidebar\";// Import ChatSidebar\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatComponent(){const{response,handleSendMessage}=useChat();const[messages,setMessages]=useState([]);const[userMessage,setUserMessage]=useState(\"\");const[sidebarOpen,setSidebarOpen]=useState(false);// Sidebar state\nconst chatMessagesRef=useRef(null);const sendMessage=async()=>{const sanitizedMessage=sanitizeMessage(userMessage);if(sanitizedMessage.trim()!==\"\"){const newMessages=[...messages,{sender:\"You\",message:sanitizedMessage}];setMessages(newMessages);try{await handleSendMessage(sanitizedMessage);// Pass sanitizedMessage here\n}catch(error){setMessages(prevMessages=>[...prevMessages,{sender:\"AI 4.O\",message:\"An error occurred. Please try again later.\"}]);}setUserMessage(\"\");// Clear the input field\n}};const sanitizeMessage=message=>{// Escape HTML entities to prevent XSS\nreturn escapeHtml(DOMPurify.sanitize(message));};// Update chat messages when response changes\nuseEffect(()=>{if(response){const sanitizedResponse=sanitizeMessage(response);setMessages(prevMessages=>[...prevMessages,{sender:\"AI 4.O\",message:sanitizedResponse}]);}},[response]);// This will trigger when `response` is updated\nconst handleKeyPress=event=>{if(event.key===\"Enter\"){sendMessage();}};useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[messages]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-app\",children:[/*#__PURE__*/_jsx(ChatSidebar,{sidebarOpen:sidebarOpen,setSidebarOpen:setSidebarOpen,messages:messages}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-messages\",ref:chatMessagesRef,children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"chat-message\",dangerouslySetInnerHTML:{__html:DOMPurify.sanitize(`<strong>${escapeHtml(msg.sender)}:</strong> ${escapeHtml(msg.message)}`)}},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"chat-input\",value:userMessage,placeholder:\"Type your message...\",onChange:e=>setUserMessage(e.target.value),onKeyPress:handleKeyPress}),/*#__PURE__*/_jsx(\"button\",{className:\"send-button\",onClick:sendMessage,children:/*#__PURE__*/_jsx(\"img\",{src:imgsend,alt:\"Send\"})})]})]})]});}export default ChatComponent;","map":{"version":3,"names":["React","useState","useEffect","useRef","imgsend","useChat","DOMPurify","escapeHtml","ChatSidebar","jsx","_jsx","jsxs","_jsxs","ChatComponent","response","handleSendMessage","messages","setMessages","userMessage","setUserMessage","sidebarOpen","setSidebarOpen","chatMessagesRef","sendMessage","sanitizedMessage","sanitizeMessage","trim","newMessages","sender","message","error","prevMessages","sanitize","sanitizedResponse","handleKeyPress","event","key","current","scrollTop","scrollHeight","className","children","ref","map","msg","index","dangerouslySetInnerHTML","__html","type","value","placeholder","onChange","e","target","onKeyPress","onClick","src","alt"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/components/ChatComponent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"../styles/Chatgpt.css\";\nimport imgsend from \"../images/sent.png\";\nimport useChat from \"../hooks/useChat\";\nimport DOMPurify from \"dompurify\";\nimport { escapeHtml } from \"../utils/securityUtils\";\nimport ChatSidebar from \"./ChatSidebar\"; // Import ChatSidebar\n\nfunction ChatComponent() {\n  const { response, handleSendMessage } = useChat();\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [sidebarOpen, setSidebarOpen] = useState(false); // Sidebar state\n  const chatMessagesRef = useRef(null);\n\n  const sendMessage = async () => {\n    const sanitizedMessage = sanitizeMessage(userMessage);\n\n    if (sanitizedMessage.trim() !== \"\") {\n      const newMessages = [\n        ...messages,\n        { sender: \"You\", message: sanitizedMessage },\n      ];\n      setMessages(newMessages);\n\n      try {\n        await handleSendMessage(sanitizedMessage); // Pass sanitizedMessage here\n      } catch (error) {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          {\n            sender: \"AI 4.O\",\n            message: \"An error occurred. Please try again later.\",\n          },\n        ]);\n      }\n\n      setUserMessage(\"\"); // Clear the input field\n    }\n  };\n\n  const sanitizeMessage = (message) => {\n    // Escape HTML entities to prevent XSS\n    return escapeHtml(DOMPurify.sanitize(message));\n  };\n\n  // Update chat messages when response changes\n  useEffect(() => {\n    if (response) {\n      const sanitizedResponse = sanitizeMessage(response);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"AI 4.O\", message: sanitizedResponse },\n      ]);\n    }\n  }, [response]); // This will trigger when `response` is updated\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"chat-app\">\n      {/* Render Sidebar */}\n      <ChatSidebar\n        sidebarOpen={sidebarOpen}\n        setSidebarOpen={setSidebarOpen}\n        messages={messages}\n      />\n\n      <div className=\"chat-container\">\n        <div className=\"chat-messages\" ref={chatMessagesRef}>\n          {messages.map((msg, index) => (\n            <div\n              key={index}\n              className=\"chat-message\"\n              dangerouslySetInnerHTML={{\n                __html: DOMPurify.sanitize(\n                  `<strong>${escapeHtml(msg.sender)}:</strong> ${escapeHtml(\n                    msg.message\n                  )}`\n                ),\n              }}\n            />\n          ))}\n        </div>\n        <div className=\"chat-input-container\">\n          <input\n            type=\"text\"\n            className=\"chat-input\"\n            value={userMessage}\n            placeholder=\"Type your message...\"\n            onChange={(e) => setUserMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n          />\n          <button className=\"send-button\" onClick={sendMessage}>\n            <img src={imgsend} alt=\"Send\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatComponent;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,uBAAuB,CAC9B,MAAO,CAAAC,OAAO,KAAM,oBAAoB,CACxC,MAAO,CAAAC,OAAO,KAAM,kBAAkB,CACtC,MAAO,CAAAC,SAAS,KAAM,WAAW,CACjC,OAASC,UAAU,KAAQ,wBAAwB,CACnD,MAAO,CAAAC,WAAW,KAAM,eAAe,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzC,QAAS,CAAAC,aAAaA,CAAA,CAAG,CACvB,KAAM,CAAEC,QAAQ,CAAEC,iBAAkB,CAAC,CAAGV,OAAO,CAAC,CAAC,CACjD,KAAM,CAACW,QAAQ,CAAEC,WAAW,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACiB,WAAW,CAAEC,cAAc,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACmB,WAAW,CAAEC,cAAc,CAAC,CAAGpB,QAAQ,CAAC,KAAK,CAAC,CAAE;AACvD,KAAM,CAAAqB,eAAe,CAAGnB,MAAM,CAAC,IAAI,CAAC,CAEpC,KAAM,CAAAoB,WAAW,CAAG,KAAAA,CAAA,GAAY,CAC9B,KAAM,CAAAC,gBAAgB,CAAGC,eAAe,CAACP,WAAW,CAAC,CAErD,GAAIM,gBAAgB,CAACE,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAClC,KAAM,CAAAC,WAAW,CAAG,CAClB,GAAGX,QAAQ,CACX,CAAEY,MAAM,CAAE,KAAK,CAAEC,OAAO,CAAEL,gBAAiB,CAAC,CAC7C,CACDP,WAAW,CAACU,WAAW,CAAC,CAExB,GAAI,CACF,KAAM,CAAAZ,iBAAiB,CAACS,gBAAgB,CAAC,CAAE;AAC7C,CAAE,MAAOM,KAAK,CAAE,CACdb,WAAW,CAAEc,YAAY,EAAK,CAC5B,GAAGA,YAAY,CACf,CACEH,MAAM,CAAE,QAAQ,CAChBC,OAAO,CAAE,4CACX,CAAC,CACF,CAAC,CACJ,CAEAV,cAAc,CAAC,EAAE,CAAC,CAAE;AACtB,CACF,CAAC,CAED,KAAM,CAAAM,eAAe,CAAII,OAAO,EAAK,CACnC;AACA,MAAO,CAAAtB,UAAU,CAACD,SAAS,CAAC0B,QAAQ,CAACH,OAAO,CAAC,CAAC,CAChD,CAAC,CAED;AACA3B,SAAS,CAAC,IAAM,CACd,GAAIY,QAAQ,CAAE,CACZ,KAAM,CAAAmB,iBAAiB,CAAGR,eAAe,CAACX,QAAQ,CAAC,CACnDG,WAAW,CAAEc,YAAY,EAAK,CAC5B,GAAGA,YAAY,CACf,CAAEH,MAAM,CAAE,QAAQ,CAAEC,OAAO,CAAEI,iBAAkB,CAAC,CACjD,CAAC,CACJ,CACF,CAAC,CAAE,CAACnB,QAAQ,CAAC,CAAC,CAAE;AAEhB,KAAM,CAAAoB,cAAc,CAAIC,KAAK,EAAK,CAChC,GAAIA,KAAK,CAACC,GAAG,GAAK,OAAO,CAAE,CACzBb,WAAW,CAAC,CAAC,CACf,CACF,CAAC,CAEDrB,SAAS,CAAC,IAAM,CACd,GAAIoB,eAAe,CAACe,OAAO,CAAE,CAC3Bf,eAAe,CAACe,OAAO,CAACC,SAAS,CAAGhB,eAAe,CAACe,OAAO,CAACE,YAAY,CAC1E,CACF,CAAC,CAAE,CAACvB,QAAQ,CAAC,CAAC,CAEd,mBACEJ,KAAA,QAAK4B,SAAS,CAAC,UAAU,CAAAC,QAAA,eAEvB/B,IAAA,CAACF,WAAW,EACVY,WAAW,CAAEA,WAAY,CACzBC,cAAc,CAAEA,cAAe,CAC/BL,QAAQ,CAAEA,QAAS,CACpB,CAAC,cAEFJ,KAAA,QAAK4B,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B/B,IAAA,QAAK8B,SAAS,CAAC,eAAe,CAACE,GAAG,CAAEpB,eAAgB,CAAAmB,QAAA,CACjDzB,QAAQ,CAAC2B,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBACvBnC,IAAA,QAEE8B,SAAS,CAAC,cAAc,CACxBM,uBAAuB,CAAE,CACvBC,MAAM,CAAEzC,SAAS,CAAC0B,QAAQ,CACxB,WAAWzB,UAAU,CAACqC,GAAG,CAAChB,MAAM,CAAC,cAAcrB,UAAU,CACvDqC,GAAG,CAACf,OACN,CAAC,EACH,CACF,CAAE,EARGgB,KASN,CACF,CAAC,CACC,CAAC,cACNjC,KAAA,QAAK4B,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACnC/B,IAAA,UACEsC,IAAI,CAAC,MAAM,CACXR,SAAS,CAAC,YAAY,CACtBS,KAAK,CAAE/B,WAAY,CACnBgC,WAAW,CAAC,sBAAsB,CAClCC,QAAQ,CAAGC,CAAC,EAAKjC,cAAc,CAACiC,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAChDK,UAAU,CAAEpB,cAAe,CAC5B,CAAC,cACFxB,IAAA,WAAQ8B,SAAS,CAAC,aAAa,CAACe,OAAO,CAAEhC,WAAY,CAAAkB,QAAA,cACnD/B,IAAA,QAAK8C,GAAG,CAAEpD,OAAQ,CAACqD,GAAG,CAAC,MAAM,CAAE,CAAC,CAC1B,CAAC,EACN,CAAC,EACH,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAA5C,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}