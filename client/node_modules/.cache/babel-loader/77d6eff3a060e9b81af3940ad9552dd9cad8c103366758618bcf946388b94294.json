{"ast":null,"code":"// chatGPTService.js\nimport axios from\"axios\";const API_URL=process.env.REACT_APP_API_URL;export const fetchCsrfToken=async()=>{try{const response=await axios.get(`${API_URL}/get-csrf-token`,{withCredentials:true});return response.data.csrfToken;}catch(error){console.error(\"Error fetching CSRF token:\",error);throw new Error(\"Failed to fetch CSRF token\");}};export const sendMessageToChatGPT=async(message,csrfToken)=>{try{const response=await axios.post(`${API_URL}/chat`,{message},{headers:{'Content-Type':'application/json',\"X-CSRF-Token\":csrfToken},withCredentials:true// Include credentials (if required)\n});return response.data.message;}catch(error){console.error(\"Error sending message to ChatGPT:\",error);throw new Error(\"Failed to send message to ChatGPT\");}};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchCsrfToken","response","get","withCredentials","data","csrfToken","error","console","Error","sendMessageToChatGPT","message","post","headers"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/services/chatGPTService.js"],"sourcesContent":["// chatGPTService.js\nimport axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport const fetchCsrfToken = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/get-csrf-token`, {\n      withCredentials: true, \n    });\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error(\"Error fetching CSRF token:\", error);\n    throw new Error(\"Failed to fetch CSRF token\");\n  }\n};\n\nexport const sendMessageToChatGPT = async (message, csrfToken) => {\n  try {\n    const response = await axios.post(\n      `${API_URL}/chat`,\n      { message }, \n      {\n        headers: {\n          'Content-Type': 'application/json',\n           \"X-CSRF-Token\": csrfToken\n        },\n        withCredentials: true, // Include credentials (if required)\n      }\n    );\n    return response.data.message;\n  } catch (error) {\n    console.error(\"Error sending message to ChatGPT:\", error);\n    throw new Error(\"Failed to send message to ChatGPT\");\n  }\n};"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAE7C,MAAO,MAAM,CAAAC,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,iBAAiB,CAAE,CAC5DO,eAAe,CAAE,IACnB,CAAC,CAAC,CACF,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAACC,SAAS,CAChC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,IAAI,CAAAE,KAAK,CAAC,4BAA4B,CAAC,CAC/C,CACF,CAAC,CAED,MAAO,MAAM,CAAAC,oBAAoB,CAAG,KAAAA,CAAOC,OAAO,CAAEL,SAAS,GAAK,CAChE,GAAI,CACF,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAN,KAAK,CAACgB,IAAI,CAC/B,GAAGf,OAAO,OAAO,CACjB,CAAEc,OAAQ,CAAC,CACX,CACEE,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CACjC,cAAc,CAAEP,SACnB,CAAC,CACDF,eAAe,CAAE,IAAM;AACzB,CACF,CAAC,CACD,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAACM,OAAO,CAC9B,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,KAAM,IAAI,CAAAE,KAAK,CAAC,mCAAmC,CAAC,CACtD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}