{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport authService from \"../services/authService\";\nimport { useNavigate } from \"react-router-dom\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst useAuth = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  const getCsrfToken = async () => {\n    const response = await axios.get(`${API_URL}/get-csrf-token`, {\n      withCredentials: true\n    });\n    return response.data.csrfToken;\n  };\n  const login = async userData => {\n    try {\n      const csrfToken = await getCsrfToken();\n      const response = await authService.login(userData, csrfToken);\n      localStorage.setItem(\"token\", response.token); // Save the token in localStorage\n      setUser(response.user);\n      setIsAuthenticated(true);\n      navigate(\"/dashboard\"); // Navigate to dashboard after login\n    } catch (error) {\n      console.error(\"Login failed\", error);\n      setIsAuthenticated(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      const csrfToken = await getCsrfToken();\n      await authService.register(userData, csrfToken);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Registration failed\", error);\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate(\"/\");\n  };\n  useEffect(() => {\n    // Check if token is in localStorage\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  return {\n    user,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n};\n_s(useAuth, \"2gT3Teno6rKwKhH8PozLchmTS4I=\", false, function () {\n  return [useNavigate];\n});\nexport default useAuth;","map":{"version":3,"names":["useState","useEffect","axios","authService","useNavigate","API_URL","process","env","REACT_APP_API_URL","useAuth","_s","user","setUser","isAuthenticated","setIsAuthenticated","navigate","getCsrfToken","response","get","withCredentials","data","csrfToken","login","userData","localStorage","setItem","token","error","console","register","logout","removeItem","getItem"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport authService from \"../services/authService\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst useAuth = () => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  const getCsrfToken = async () => {\n    const response = await axios.get(`${API_URL}/get-csrf-token`, {\n      withCredentials: true,\n    });\n    return response.data.csrfToken;\n  };\n\n  const login = async (userData) => {\n    try {\n      const csrfToken = await getCsrfToken();\n      const response = await authService.login(userData, csrfToken);\n      localStorage.setItem(\"token\", response.token); // Save the token in localStorage\n      setUser(response.user);\n      setIsAuthenticated(true);\n      navigate(\"/dashboard\"); // Navigate to dashboard after login\n    } catch (error) {\n      console.error(\"Login failed\", error);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const csrfToken = await getCsrfToken();\n      await authService.register(userData, csrfToken);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Registration failed\", error);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate(\"/\");\n  };\n\n  useEffect(() => {\n    // Check if token is in localStorage\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  return { user, isAuthenticated, login, register, logout };\n};\n\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMe,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9B,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,GAAGb,OAAO,iBAAiB,EAAE;MAC5Dc,eAAe,EAAE;IACnB,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI,CAACC,SAAS;EAChC,CAAC;EAED,MAAMC,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAChC,IAAI;MACF,MAAMF,SAAS,GAAG,MAAML,YAAY,CAAC,CAAC;MACtC,MAAMC,QAAQ,GAAG,MAAMd,WAAW,CAACmB,KAAK,CAACC,QAAQ,EAAEF,SAAS,CAAC;MAC7DG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC;MAC/Cd,OAAO,CAACK,QAAQ,CAACN,IAAI,CAAC;MACtBG,kBAAkB,CAAC,IAAI,CAAC;MACxBC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCb,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAED,MAAMe,QAAQ,GAAG,MAAON,QAAQ,IAAK;IACnC,IAAI;MACF,MAAMF,SAAS,GAAG,MAAML,YAAY,CAAC,CAAC;MACtC,MAAMb,WAAW,CAAC0B,QAAQ,CAACN,QAAQ,EAAEF,SAAS,CAAC;MAC/CN,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnB3B,WAAW,CAAC2B,MAAM,CAAC,CAAC;IACpBN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCnB,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;IACzBC,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd;IACA,MAAMyB,KAAK,GAAGF,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIN,KAAK,EAAE;MACTZ,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEH,IAAI;IAAEE,eAAe;IAAES,KAAK;IAAEO,QAAQ;IAAEC;EAAO,CAAC;AAC3D,CAAC;AAACpB,EAAA,CArDID,OAAO;EAAA,QAGML,WAAW;AAAA;AAoD9B,eAAeK,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}