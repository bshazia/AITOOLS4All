{"ast":null,"code":"var _jsxFileName = \"/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport authService from \"../services/authService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  const getCsrfToken = async () => {\n    const response = await axios.get(`${process.env.REACT_APP_API_URL}/get-csrf-token`, {\n      withCredentials: true\n    });\n    return response.data.csrfToken;\n  };\n  const login = async userData => {\n    try {\n      const csrfToken = await getCsrfToken();\n      const response = await authService.login(userData, csrfToken);\n      localStorage.setItem(\"token\", response.token); // Save the token in localStorage\n      setUser(response.user);\n      setIsAuthenticated(true);\n      navigate(\"/dashboard\"); // Navigate to dashboard after login\n    } catch (error) {\n      console.error(\"Login failed\", error);\n      setIsAuthenticated(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      const csrfToken = await getCsrfToken();\n      await authService.register(userData, csrfToken);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Registration failed\", error);\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate(\"/\");\n  };\n  useEffect(() => {\n    // Check if token is in localStorage\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsAuthenticated(true);\n    }\n    setLoading(false); // Set loading to false after checking\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ufPRwCM+yoI8bSLEFK2/jHQDOyY=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","authService","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","navigate","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","getCsrfToken","response","get","process","env","REACT_APP_API_URL","withCredentials","data","csrfToken","login","userData","localStorage","setItem","token","error","console","register","logout","removeItem","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\nimport React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport authService from \"../services/authService\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const navigate = useNavigate();\n\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  const getCsrfToken = async () => {\n    const response = await axios.get(\n      `${process.env.REACT_APP_API_URL}/get-csrf-token`,\n      {\n        withCredentials: true,\n      }\n    );\n    return response.data.csrfToken;\n  };\n\n  const login = async (userData) => {\n    try {\n      const csrfToken = await getCsrfToken();\n      const response = await authService.login(userData, csrfToken);\n      localStorage.setItem(\"token\", response.token); // Save the token in localStorage\n      setUser(response.user);\n      setIsAuthenticated(true);\n      navigate(\"/dashboard\"); // Navigate to dashboard after login\n    } catch (error) {\n      console.error(\"Login failed\", error);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const csrfToken = await getCsrfToken();\n      await authService.register(userData, csrfToken);\n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Registration failed\", error);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate(\"/\");\n  };\n\n  useEffect(() => {\n    // Check if token is in localStorage\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      setIsAuthenticated(true);\n    }\n    setLoading(false); // Set loading to false after checking\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ user, isAuthenticated, loading, login, register, logout }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C,MAAMkB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAC9B,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,iBAAiB,EACjD;MACEC,eAAe,EAAE;IACnB,CACF,CAAC;IACD,OAAOL,QAAQ,CAACM,IAAI,CAACC,SAAS;EAChC,CAAC;EAED,MAAMC,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAChC,IAAI;MACF,MAAMF,SAAS,GAAG,MAAMR,YAAY,CAAC,CAAC;MACtC,MAAMC,QAAQ,GAAG,MAAMhB,WAAW,CAACwB,KAAK,CAACC,QAAQ,EAAEF,SAAS,CAAC;MAC7DG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEX,QAAQ,CAACY,KAAK,CAAC,CAAC,CAAC;MAC/ClB,OAAO,CAACM,QAAQ,CAACP,IAAI,CAAC;MACtBG,kBAAkB,CAAC,IAAI,CAAC;MACxBJ,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCjB,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAED,MAAMmB,QAAQ,GAAG,MAAON,QAAQ,IAAK;IACnC,IAAI;MACF,MAAMF,SAAS,GAAG,MAAMR,YAAY,CAAC,CAAC;MACtC,MAAMf,WAAW,CAAC+B,QAAQ,CAACN,QAAQ,EAAEF,SAAS,CAAC;MAC/Cf,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBhC,WAAW,CAACgC,MAAM,CAAC,CAAC;IACpBN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCvB,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;IACzBJ,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAEDV,SAAS,CAAC,MAAM;IACd;IACA,MAAM8B,KAAK,GAAGF,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIN,KAAK,EAAE;MACThB,kBAAkB,CAAC,IAAI,CAAC;IAC1B;IACAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IACnBC,KAAK,EAAE;MAAE3B,IAAI;MAAEE,eAAe;MAAEE,OAAO;MAAEW,KAAK;MAAEO,QAAQ;MAAEC;IAAO,CAAE;IAAA1B,QAAA,EAElEA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjC,EAAA,CAjEWF,YAAY;EAAA,QACNJ,WAAW;AAAA;AAAAwC,EAAA,GADjBpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}