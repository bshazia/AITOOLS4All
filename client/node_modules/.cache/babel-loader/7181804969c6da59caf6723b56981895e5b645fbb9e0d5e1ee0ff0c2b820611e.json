{"ast":null,"code":"// chatGPTService.js\nimport axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\nexport const fetchCsrfToken = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/get-csrf-token`);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error(\"Error fetching CSRF token:\", error);\n    throw new Error(\"Failed to fetch CSRF token\");\n  }\n};\nexport const sendMessageToChatGPT = async (message, csrfToken) => {\n  try {\n    const response = await axios.post(`${API_URL}\n      /chat`, {\n      message,\n      language: \"en\"\n    }, {\n      headers: {\n        \"X-CSRF-Token\": csrfToken\n      }\n    });\n    return response.data.message;\n  } catch (error) {\n    console.error(\"Error sending message to ChatGPT:\", error);\n    throw new Error(\"Failed to send message to ChatGPT\");\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","fetchCsrfToken","response","get","data","csrfToken","error","console","Error","sendMessageToChatGPT","message","post","language","headers"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/services/chatGPTService.js"],"sourcesContent":["// chatGPTService.js\nimport axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL;\n\n\nexport const fetchCsrfToken = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/get-csrf-token`);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error(\"Error fetching CSRF token:\", error);\n    throw new Error(\"Failed to fetch CSRF token\");\n  }\n};\n\nexport const sendMessageToChatGPT = async (message, csrfToken) => {\n  try {\n    const response = await axios.post(`${API_URL}\n      /chat`,\n      { message, language: \"en\" },\n      { headers: { \"X-CSRF-Token\": csrfToken } }\n    );\n    return response.data.message;\n  } catch (error) {\n    console.error(\"Error sending message to ChatGPT:\", error);\n    throw new Error(\"Failed to send message to ChatGPT\");\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAG7C,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,OAAO,iBAAiB,CAAC;IAC7D,OAAOK,QAAQ,CAACE,IAAI,CAACC,SAAS;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOC,OAAO,EAAEL,SAAS,KAAK;EAChE,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMN,KAAK,CAACe,IAAI,CAAC,GAAGd,OAAO;AAChD,YAAY,EACN;MAAEa,OAAO;MAAEE,QAAQ,EAAE;IAAK,CAAC,EAC3B;MAAEC,OAAO,EAAE;QAAE,cAAc,EAAER;MAAU;IAAE,CAC3C,CAAC;IACD,OAAOH,QAAQ,CAACE,IAAI,CAACM,OAAO;EAC9B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;EACtD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}