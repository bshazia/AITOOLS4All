{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport authService from \"../services/authService\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\n\nconst API_URL = process.env.REACT_APP_API_URL;\nconst useAuth = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Function to get the CSRF token from the backend\n  const getCsrfToken = async () => {\n    const response = await axios.get(`${API_URL}/get-csrf-token`, {\n      withCredentials: true // Ensure cookies are sent\n    });\n    return response.data.csrfToken;\n  };\n  const login = async userData => {\n    try {\n      const csrfToken = await getCsrfToken(); // Get CSRF token\n      console.log(\"CSRF Token for login:\", csrfToken); // Log the CSRF token\n      const response = await authService.login(userData, csrfToken); // Pass token to authService\n      localStorage.setItem(\"token\", response.token); // Save JWT token\n      setUser(response.user);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error(\"Login failed\", error);\n      setIsAuthenticated(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      const csrfToken = await getCsrfToken(); // Get CSRF token\n      await authService.register(userData, csrfToken); // Pass token to authService\n    } catch (error) {\n      console.error(\"Registration failed\", error);\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  return {\n    user,\n    isAuthenticated,\n    login,\n    register,\n    logout\n  };\n};\n_s(useAuth, \"k19B3VQCOMbqjP9Ul958Nm6p/lo=\");\nexport default useAuth;","map":{"version":3,"names":["useState","axios","authService","useNavigate","API_URL","process","env","REACT_APP_API_URL","useAuth","_s","user","setUser","isAuthenticated","setIsAuthenticated","getCsrfToken","response","get","withCredentials","data","csrfToken","login","userData","console","log","localStorage","setItem","token","error","register","logout"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/hooks/useAuth.js"],"sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport authService from \"../services/authService\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst useAuth = () => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Function to get the CSRF token from the backend\n  const getCsrfToken = async () => {\n    const response = await axios.get(`${API_URL}/get-csrf-token`, {\n      withCredentials: true, // Ensure cookies are sent\n    });\n    return response.data.csrfToken;\n  };\n  \n  const login = async (userData) => {\n    try {\n      const csrfToken = await getCsrfToken(); // Get CSRF token\n      console.log(\"CSRF Token for login:\", csrfToken); // Log the CSRF token\n      const response = await authService.login(userData, csrfToken); // Pass token to authService\n      localStorage.setItem(\"token\", response.token); // Save JWT token\n      setUser(response.user);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error(\"Login failed\", error);\n      setIsAuthenticated(false);\n    }\n  };\n\n  \n  const register = async (userData) => {\n    try {\n      const csrfToken = await getCsrfToken(); // Get CSRF token\n      await authService.register(userData, csrfToken); // Pass token to authService\n    } catch (error) {\n      console.error(\"Registration failed\", error);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  return { user, isAuthenticated, login, register, logout };\n};\n\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;;AAGhD,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,GAAGZ,OAAO,iBAAiB,EAAE;MAC5Da,eAAe,EAAE,IAAI,CAAE;IACzB,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI,CAACC,SAAS;EAChC,CAAC;EAED,MAAMC,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAChC,IAAI;MACF,MAAMF,SAAS,GAAG,MAAML,YAAY,CAAC,CAAC,CAAC,CAAC;MACxCQ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEJ,SAAS,CAAC,CAAC,CAAC;MACjD,MAAMJ,QAAQ,GAAG,MAAMb,WAAW,CAACkB,KAAK,CAACC,QAAQ,EAAEF,SAAS,CAAC,CAAC,CAAC;MAC/DK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEV,QAAQ,CAACW,KAAK,CAAC,CAAC,CAAC;MAC/Cf,OAAO,CAACI,QAAQ,CAACL,IAAI,CAAC;MACtBG,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCd,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAGD,MAAMe,QAAQ,GAAG,MAAOP,QAAQ,IAAK;IACnC,IAAI;MACF,MAAMF,SAAS,GAAG,MAAML,YAAY,CAAC,CAAC,CAAC,CAAC;MACxC,MAAMZ,WAAW,CAAC0B,QAAQ,CAACP,QAAQ,EAAEF,SAAS,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnB3B,WAAW,CAAC2B,MAAM,CAAC,CAAC;IACpBlB,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,OAAO;IAAEH,IAAI;IAAEE,eAAe;IAAEQ,KAAK;IAAEQ,QAAQ;IAAEC;EAAO,CAAC;AAC3D,CAAC;AAACpB,EAAA,CA3CID,OAAO;AA6Cb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}