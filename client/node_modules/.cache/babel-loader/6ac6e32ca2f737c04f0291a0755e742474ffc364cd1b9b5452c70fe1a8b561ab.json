{"ast":null,"code":"var _jsxFileName = \"/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport { useState, useContext } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport DOMPurify from \"dompurify\";\nimport { escapeHtml } from \"../utils/securityUtils\"; // Ensure you have this utility\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = () => {\n  _s();\n  const {\n    login\n  } = useContext(AuthContext);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const validateEmail = email => {\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setEmailError(\"\");\n    setPasswordError(\"\");\n\n    // Validate inputs\n    if (!validateEmail(email)) {\n      setEmailError(\"Invalid email address.\");\n      return;\n    }\n    if (password.trim() === \"\") {\n      setPasswordError(\"Password is required.\");\n      return;\n    }\n    try {\n      await login({\n        email: sanitizeInput(email),\n        password: sanitizeInput(password)\n      });\n    } catch (error) {\n      console.error(\"Login failed\", error);\n    }\n  };\n  const sanitizeInput = input => {\n    return DOMPurify.sanitize(escapeHtml(input));\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      value: email,\n      onChange: e => setEmail(e.target.value),\n      placeholder: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), emailError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: emailError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: password,\n      onChange: e => setPassword(e.target.value),\n      placeholder: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), passwordError && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: passwordError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"AiJRA1SCLg5XXGZbkdInokupfCU=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["useState","useContext","AuthContext","DOMPurify","escapeHtml","jsxDEV","_jsxDEV","LoginForm","_s","login","email","setEmail","password","setPassword","emailError","setEmailError","passwordError","setPasswordError","validateEmail","emailRegex","test","handleSubmit","e","preventDefault","trim","sanitizeInput","error","console","input","sanitize","onSubmit","children","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/bsjatoi/Desktop/Jatoi_Startup/AITools4all/client/src/components/LoginForm.js"],"sourcesContent":["import { useState, useContext } from \"react\";\nimport { AuthContext } from \"../contexts/AuthContext\";\nimport DOMPurify from \"dompurify\";\nimport { escapeHtml } from \"../utils/securityUtils\"; // Ensure you have this utility\n\nconst LoginForm = () => {\n  const { login } = useContext(AuthContext);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n\n  const validateEmail = (email) => {\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setEmailError(\"\");\n    setPasswordError(\"\");\n\n    // Validate inputs\n    if (!validateEmail(email)) {\n      setEmailError(\"Invalid email address.\");\n      return;\n    }\n    if (password.trim() === \"\") {\n      setPasswordError(\"Password is required.\");\n      return;\n    }\n\n    try {\n      await login({\n        email: sanitizeInput(email),\n        password: sanitizeInput(password),\n      });\n    } catch (error) {\n      console.error(\"Login failed\", error);\n    }\n  };\n\n  const sanitizeInput = (input) => {\n    return DOMPurify.sanitize(escapeHtml(input));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Email\"\n      />\n      {emailError && <div className=\"error\">{emailError}</div>}\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder=\"Password\"\n      />\n      {passwordError && <div className=\"error\">{passwordError}</div>}\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}